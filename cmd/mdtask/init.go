package mdtask

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
)

var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize a new mdtask configuration",
	Long: `Initialize a new mdtask configuration in the current directory.
This creates a .mdtask.toml configuration file with default settings.`,
	RunE: runInit,
}

var (
	initForce  bool
	initGlobal bool
)

func init() {
	rootCmd.AddCommand(initCmd)
	initCmd.Flags().BoolVarP(&initForce, "force", "f", false, "Overwrite existing configuration file")
	initCmd.Flags().BoolVarP(&initGlobal, "global", "g", false, "Create global configuration in ~/.config/mdtask/config.toml")
}

func runInit(cmd *cobra.Command, args []string) error {
	var configPath string
	
	if initGlobal {
		// Create global config
		homeDir, err := os.UserHomeDir()
		if err != nil {
			return fmt.Errorf("failed to get home directory: %w", err)
		}
		configDir := filepath.Join(homeDir, ".config", "mdtask")
		if err := os.MkdirAll(configDir, 0755); err != nil {
			return fmt.Errorf("failed to create config directory: %w", err)
		}
		configPath = filepath.Join(configDir, "config.toml")
	} else {
		// Create local config
		configPath = ".mdtask.toml"
	}
	
	// Check if config file already exists
	if _, err := os.Stat(configPath); err == nil && !initForce {
		return fmt.Errorf("configuration file %s already exists. Use --force to overwrite", configPath)
	}
	
	// Configuration template
	configTemplate := `# mdtask configuration file
# Generated by mdtask init

# Paths to search for task files
# Default: ["."]
paths = ["."]

[task]
# Prefix to add to all new task titles
# This is useful for adding project codes, ticket numbers, etc.
# Example: "[PROJECT-123] " or "TASK: "
# Default: ""
title_prefix = ""

# Default status for new tasks
# Options: TODO, WIP, WAIT, SCHE, DONE
# Default: "TODO"
default_status = "TODO"

# Template for new task description
# This will be used as default description for new tasks
# Example: "TODO: Add description"
# Default: ""
description_template = ""

# Template for new task content
# This will be used as default content for new tasks
# Supports multiline strings with triple quotes
# Example:
# content_template = """
# ## Background
# 
# ## Objective
# 
# ## Tasks
# - [ ] Task 1
# - [ ] Task 2
# 
# ## Notes
# """
content_template = ""

# Default tags to add to all new tasks
# These tags will be added in addition to "mdtask" and any user-specified tags
# Example: ["project/myproject", "type/feature"]
# Default: []
default_tags = []

[web]
# Default port for web server
# Default: 7000
port = 7000

# Whether to open browser automatically when starting web server
# Default: true
open_browser = true
`
	
	// Create directory if it doesn't exist
	dir := filepath.Dir(configPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("failed to create directory: %w", err)
	}
	
	// Write configuration file
	if err := os.WriteFile(configPath, []byte(configTemplate), 0644); err != nil {
		return fmt.Errorf("failed to write configuration file: %w", err)
	}
	
	fmt.Printf("Created configuration file: %s\n", configPath)
	fmt.Println("\nYou can now edit this file to customize your mdtask setup.")
	fmt.Println("Common customizations:")
	fmt.Println("  - Set 'title_prefix' to add a prefix to all new task titles")
	fmt.Println("  - Add additional paths to search for task files")
	fmt.Println("  - Change the default web server port")
	
	return nil
}